// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SevaKendra {
  id              String   @id @default(uuid())
  name            String
  cityId          String
  mobileNumber    String
  landLineNumber  String
  startDate       DateTime
  contactPersonId String

  services      ServicesOnSevaKendras[]
  users         User[]
  city          City                    @relation(fields: [cityId], references: [id])
  contactPerson ContactPerson           @relation(fields: [contactPersonId], references: [id])
  designations  Designation[]
}

model ContactPerson {
  id           String @id @default(uuid())
  name         String
  email        String
  phoneNumber1 String
  phoneNumber2 String

  sevaKendra SevaKendra[]
}

model ServicesOnSevaKendras {
  id           String @id @default(uuid())
  sevakendraId String
  serviceId    String

  sevakendra SevaKendra @relation(fields: [sevakendraId], references: [id])
  service    Service    @relation(fields: [serviceId], references: [id])
}

model ServiceType {
  id       String           @id @default(uuid())
  name     String
  subTypes ServiceSubType[]
}

model ServiceSubType {
  id       String    @id @default(uuid())
  name     String
  services Service[]

  serviceTypeId String
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])
}

model Service {
  id        String   @id @default(uuid())
  name      String
  subTypeId String
  createdAt DateTime @default(now())

  subType     ServiceSubType          @relation(fields: [subTypeId], references: [id])
  sevaKendras ServicesOnSevaKendras[]
  divyang     DivyangServiceMapping[]
}

model City {
  id         String @id @default(uuid())
  name       String
  districtId String

  sevakendra SevaKendra[]
  district   District     @relation(fields: [districtId], references: [id])
}

model District {
  id      String @id @default(uuid())
  name    String
  stateId String

  cities     City[]
  state      State                    @relation(fields: [stateId], references: [id])
  disability DivyangPersonalDetails[]
}

model State {
  id        String     @id @default(uuid())
  name      String
  districts District[]
}

model User {
  id               String                   @id @default(uuid())
  userId           String                   @unique // check datatype
  firstName        String
  lastName         String
  gender           Gender
  dateOfBirth      DateTime
  contactNumber    String
  whatsappNumber   String
  designationId    String
  sevaKendraId     String
  picture          String // url
  mail             String
  passwordId       String                   @unique
  password         UserPassword             @relation(fields: [passwordId], references: [id])
  designation      Designation              @relation(fields: [designationId], references: [id])
  sevakendra       SevaKendra               @relation(fields: [sevaKendraId], references: [id])
  featuresAssigned FeaturesOnDesignations[]
}

model UserPassword {
  id             String @id @default(uuid())
  hashedPassword String
  user           User?
}

// side bars seva kendra master, service master
model Feature {
  id           String                   @id @default(uuid())
  name         String
  designations FeaturesOnDesignations[]
}

// e.g. coordinator , volunteers
// or Designation
model Designation {
  id   String @id @default(uuid())
  name String

  sevaKendraId String
  sevaKendra   SevaKendra @relation(fields: [sevaKendraId], references: [id])

  users    User[]
  features FeaturesOnDesignations[]
}

// mapping sidebar/feature to certain designation e.g. users side bar to coordinator
model FeaturesOnDesignations {
  id            String   @id @default(uuid())
  featureId     String
  designationId String
  assignedOn    DateTime @default(now())
  assignedById  String
  assignedBy    User     @relation(fields: [assignedById], references: [id])

  feature     Feature     @relation(fields: [featureId], references: [id])
  designation Designation @relation(fields: [designationId], references: [id])
}

model DivyangPersonalDetails {
  id                      String     @id @default(uuid())
  firstName               String
  lastName                String
  divyangId               String
  picture                 String // url
  gender                  Gender
  bloodGroup              BloodGroup
  dateOfBirth             DateTime
  age                     Int
  mailId                  String
  mobileNumber            String
  fatherName              String
  motherName              String
  isMarried               Boolean
  spouseName              String?
  spouseNumber            String?
  religion                String
  communityCategoryId     String
  extraCurricularActivity String

  voterId                String
  panCardNumber          String
  drivingLicense         String
  rationCardNumber       String
  aadharCardNumber       String
  pensionCardNumber      String
  medicalInsuranceNumber String
  disabilitySchemeNumber String
  BPL_OR_APL_Number      String

  doorNumber      String
  flatNumber      String
  streetName      String
  nagarName       String
  districtId      String
  // isRural Boolean
  villageName     String?
  panchayatUnion  String?
  taluk           String?
  townPanchayat   String?
  municipality    String?
  corporation     String?
  MLAConstituency String?
  MPConstituancy  String?
  pincode         Int?

  isDisabilitySinceBirth    Boolean
  disabilitySince           DateTime?
  disabilityArea            String
  disabilityPercentage      String
  disabilityDueTo           String
  certificateIssueAuthority String
  disabilityCardUrl         String // url
  disabilityDistrictId      String
  identityCardNumber        String
  udidCardNumber            String
  udidEnrollmentNumber      String
  udidCardUrl               String // url

  isEmployed       Boolean
  unemployedSince  DateTime
  occupation       String
  income           Int
  fatherOccupation String
  fatherIncome     Int
  motherOccupation String
  motherIncome     Int
  spouseOccupation String
  spouseIncome     Int

  communityCategory CommunityCategory @relation(fields: [communityCategoryId], references: [id])

  district District @relation(fields: [districtId], references: [id])

  disabilities          DisabilityOfDivyang[]
  eductionQualification DivyangEducationalQualification[]
  services              DivyangServiceMapping[]
}

model DivyangServiceMapping {
  id                 String                 @id @default(uuid())
  divyangId          String
  divyang            DivyangPersonalDetails @relation(fields: [divyangId], references: [id])
  userId             String
  serviceId          String
  service            Service                @relation(fields: [serviceId], references: [id])
  dateOfService      DateTime
  dueDate            DateTime
  isFollowUpRequired Boolean
  isCompleted        Boolean
  completedDate      DateTime

  followUp FollowUp[]
}

model FollowUp {
  id                      String  @id @default(uuid())
  name                    String
  mobileNumber            String
  email                   String // validation?
  sendMail                Boolean
  divyangServiceMappingId String

  divyangServiceMapping DivyangServiceMapping @relation(fields: [divyangServiceMappingId], references: [id])
}

model DisabilityOfDivyang {
  id                         String @id @default(uuid())
  divyangId                  String
  disabilitySubTypeId        String @unique
  divyangDisabilityDetailsId String

  divyangPersonalDetails DivyangPersonalDetails @relation(fields: [divyangId], references: [id])
  disabilityType         DisabilitySubType      @relation(fields: [disabilitySubTypeId], references: [id])
}

model DisabilitySubType {
  id               String @id @default(uuid())
  name             String
  disabilityTypeId String

  divyang    DisabilityOfDivyang[]
  disability DisabilityType        @relation(fields: [disabilityTypeId], references: [id])
}

model DisabilityType {
  id         String              @id @default(uuid())
  name       String
  disability DisabilitySubType[]
}

model MPConstituency {
  id   String @id @default(uuid())
  name String
}

model MLAConstituency {
  Id   String @id @default(uuid())
  name String
}

model PanchayatUnion {
  id   String @id @default(uuid())
  name String
}

model TownPanchayat {
  id   String @id @default(uuid())
  name String
}

model Municipality {
  id   String @id @default(uuid())
  name String
}

model Corporation {
  id   String @id @default(uuid())
  name String
}

model CommunityCategory {
  id      String                   @id @default(uuid())
  name    String
  divyang DivyangPersonalDetails[]
}

// mapping table DivyangPersonalDetails - EducationalQualification mapping table
model DivyangEducationalQualification {
  id                         String @id @default(uuid())
  divyangPersonalDetailsId   String
  educationalQualificationId String

  education EducationQualification @relation(fields: [educationalQualificationId], references: [id])
  divyang   DivyangPersonalDetails @relation(fields: [divyangPersonalDetailsId], references: [id])
}

// e.g. 1 - b.tech (IT)
model EducationQualification {
  id      String                            @id @default(uuid())
  name    String
  divyang DivyangEducationalQualification[]
}

enum Gender {
  MALE
  FEMALE
  TRANSGENDER
  OTHERS
}

enum BloodGroup {
  O_POSITIVE
  O_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  A_POSITIVE
  A_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  HH
  others
}

enum Status {
  PENDING
  COMPLETED
}
