// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id         String          @id @default(uuid())
  userName    String          @unique
  passwordId String          @unique
  password   Password        @relation(fields: [passwordId], references: [id])
  user       User?           @relation("person")
  divyang    DivyangDetails? @relation("person")

  divyangsCreated               DivyangDetails[]        @relation("divyangCreatedBy")
  divyangsUpdated               DivyangDetails[]        @relation("divyangUpdatedBy")
  createdDivyangServiceMappings DivyangServiceMapping[] @relation("serviceMappingCreatedBy")
  updatedDivyangServiceMappings DivyangServiceMapping[] @relation("serviceMappingUpdatedBy")
}

model Password {
  id       String  @id @default(uuid())
  password String
  person   Person?
}

model SevaKendra {
  id              String    @id @default(uuid())
  name            String    @unique
  districtId      String
  address         String
  mobileNumber    String
  landLineNumber  String
  startDate       DateTime?
  contactPersonId String
  createdAt       DateTime  @default(now())
  createdById     String?
  updatedAt       DateTime  @updatedAt
  updatedById     String?

  services              ServicesOnSevaKendras[]
  district              District                @relation(fields: [districtId], references: [id])
  contactPerson         ContactPerson           @relation(fields: [contactPersonId], references: [id])
  designations          Designation[]
  auditLog              SevaKendraAuditLog[]
  createdBy             User?                   @relation("sevaKendraCreatedBy", fields: [createdById], references: [id])
  updatedBy             User?                   @relation("sevaKendraUpdatedBy", fields: [updatedById], references: [id])
  divyangServiceMapping DivyangServiceMapping[]

  @@unique([name, districtId])
}

model SevaKendraAuditLog {
  id           String             @id @default(uuid())
  sevaKendraId String
  status       AuditLogStatusEnum
  date         DateTime           @default(now())
  description  String?

  sevakendra SevaKendra @relation(fields: [sevaKendraId], references: [id])
}

model ContactPerson {
  id           String  @id @default(uuid())
  name         String
  email        String?
  phoneNumber1 String
  phoneNumber2 String?

  sevaKendra SevaKendra[]
}

model ServicesOnSevaKendras {
  id           String @id @default(uuid())
  sevakendraId String
  serviceId    String

  sevakendra SevaKendra @relation(fields: [sevakendraId], references: [id])
  service    Service    @relation(fields: [serviceId], references: [id])

  @@unique([sevakendraId, serviceId])
}

model ServiceType {
  id        String    @id @default(uuid())
  name      String    @unique
  service   Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  id            String   @id @default(uuid())
  name          String
  updatedAt     DateTime @updatedAt
  serviceTypeId String
  createdAt     DateTime @default(now())

  serviceType ServiceType             @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)
  sevaKendras ServicesOnSevaKendras[]
  divyang     DivyangServiceMapping[]

  @@unique([serviceTypeId, name])
}

model District {
  id                String            @id @default(uuid())
  name              String
  stateId           String
  sevakendra        SevaKendra[]
  state             State             @relation(fields: [stateId], references: [id])
  disability        DivyangDetails[]  @relation("disability")
  MPConstituencies  MPConstituency[]
  MLAConstituencies MLAConstituency[]
  TownPanchayats    TownPanchayat[]
  Municipalities    Municipality[]
  Corporations      Corporation[]
  PanchayatUnions   PanchayatUnion[]
  Taluks            Taluk[]
  divyangDetails    DivyangDetails[]  @relation("divyangDetails")

  @@unique([name, stateId])
}

model State {
  id        String     @id @default(uuid())
  name      String     @unique
  districts District[]
}

model User {
  id             String      @id @default(uuid())
  userId         String      @unique
  firstName      String
  lastName       String
  gender         GenderEnum?
  dateOfBirth    DateTime?
  contactNumber  String
  whatsappNumber String?
  designationId  String
  picture        String? // url
  email          String

  personId String @unique
  person   Person @relation("person", fields: [personId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  usersCreated User[] @relation("createdBy")
  usersUpdated User[] @relation("updatedBy")

  createdById String ?
  createdBy   User?  @relation("createdBy", fields: [createdById], references: [id])

  updatedById String?
  updatedBy   User?   @relation("updatedBy", fields: [updatedById], references: [id])

  //password              UserPassword            @relation(fields: [passwordId], references: [id])
  designation           Designation             @relation("Designation-Users", fields: [designationId], references: [id])
  designationsCreated   Designation[]           @relation("createdBy")
  designationsUpdated   Designation[]           @relation("updatedBy")
  // sevaKendraFollowUp    SevaKendraFollowUp[]
  auditLog          UserAuditLog[]
  divyangServiceMapping DivyangServiceMapping[] @relation("inchargeUser")

  // password                      UserPassword            @relation(fields: [passwordId], references: [id])

  // sevaKendraFollowUp            SevaKendraFollowUp[]

  createdSevaKendra SevaKendra[] @relation("sevaKendraCreatedBy")
  updatedSevaKendra SevaKendra[] @relation("sevaKendraUpdatedBy")
}

model UserAuditLog {
  id          String             @id @default(uuid())
  userId      String
  status      AuditLogStatusEnum
  date        DateTime
  description String?

  user User @relation(fields: [userId], references: [id])
}

// model UserPassword {
//   id             String @id @default(uuid())
//   hashedPassword String
//   user           User?
// }

// side bars seva kendra master, service master
model Feature {
  id           String                   @id @default(uuid())
  name         String                   @unique
  designations FeaturesOnDesignations[]
}

// e.g. coordinator , volunteers
// or Designation
model Designation {
  id           String @id @default(uuid())
  name         String
  sevaKendraId String

  createdAt   DateTime? @default(now())
  createdById String?
  updatedAt   DateTime? @updatedAt
  updatedById String?

  createdBy  User?      @relation("createdBy", fields: [createdById], references: [id])
  updatedBy  User?      @relation("updatedBy", fields: [updatedById], references: [id])
  sevaKendra SevaKendra @relation(fields: [sevaKendraId], references: [id])

  users               User[]                   @relation("Designation-Users")
  features            FeaturesOnDesignations[]
  auditLog DesignationAuditLog[]

  @@unique([sevaKendraId, name])
}

model DesignationAuditLog {
  id            String             @id @default(uuid())
  designationId String
  status        AuditLogStatusEnum
  date          DateTime
  description   String?

  designation Designation @relation(fields: [designationId], references: [id])
}

// mapping sidebar/feature to certain designation e.g. users side bar to coordinator
model FeaturesOnDesignations {
  id            String @id @default(uuid())
  featureId     String
  designationId String

  feature     Feature     @relation(fields: [featureId], references: [id])
  designation Designation @relation(fields: [designationId], references: [id])
}

model DivyangDetails {
  id                      String         @id @default(uuid())
  firstName               String
  lastName                String
  divyangId               String
  picture                 String? // url
  gender                  GenderEnum?
  bloodGroup              BloodGroupEnum?
  dateOfBirth             DateTime
  age                     Int?
  mailId                  String
  mobileNumber            String
  fatherName              String?
  motherName              String?
  isMarried               Boolean?
  spouseName              String?
  spouseNumber            String?
  religion                String?
  community               String?
  communityCategoryId     String?
  extraCurricularActivity String?
  // all below here are in next page
  voterId                 String?
  panCardNumber           String?
  drivingLicense          String?
  rationCardNumber        String?
  aadharCardNumber        String?
  pensionCardNumber       String?
  medicalInsuranceNumber  String?
  disabilitySchemeNumber  String?
  BPL_OR_APL_Number       String?

  doorNumber              String?
  flatNumber              String?
  streetName              String?
  nagarName               String?
  districtId              String?
  doorNumberCommunication String?
  flatNumberCommunication String?
  nagarNameCommunication  String?
  districtIdCommunication String?
  isRural                 Boolean?
  villageName             String?
  panchayatUnionId        String?
  talukId                 String?
  townPanchayatId         String?
  municipalityId          String?
  corporationId           String?
  MLAConstituencyId       String?
  MPConstituancyId        String?
  pincode                 Int?

  districtCode String?
  stateCode    String?

  identityCardNumber   String?
  udidCardNumber       String?
  udidEnrollmentNumber String?
  udidCardUrl          String? // url

  isEmployed            Boolean?
  unemployedSince       DateTime?
  occupation            String?
  income                Int?
  fatherOccupation      String?
  fatherIncome          Int?
  motherOccupation      String?
  motherIncome          Int?
  spouseOccupation      String?
  spouseIncome          Int?
  createdAt             DateTime                          @default(now())
  updatedAt             DateTime                          @updatedAt
  createdById           String?
  updatedById           String?
  personId              String                            @unique
  person                Person                            @relation("person", fields: [personId], references: [id])
  communityCategory     CommunityCategory?                 @relation(fields: [communityCategoryId], references: [id])
  corporation           Corporation?                      @relation(fields: [corporationId], references: [id])
  mlaconstituency       MLAConstituency?                  @relation(fields: [MLAConstituencyId], references: [id])
  mpconstituency        MPConstituency?                   @relation(fields: [MPConstituancyId], references: [id])
  municipality          Municipality?                     @relation(fields: [municipalityId], references: [id])
  townPanchayat         TownPanchayat?                    @relation(fields: [townPanchayatId], references: [id])
  taluk                 Taluk?                            @relation(fields: [talukId], references: [id])
  panchayatUnion        PanchayatUnion?                   @relation(fields: [panchayatUnionId], references: [id])
  district              District?                         @relation("disability", fields: [districtId], references: [id])
  disabilities          DisabilityOfDivyang[]
  eductionQualification DivyangEducationalQualification[]
  services              DivyangServiceMapping[]
  districtCommunication District?                         @relation("divyangDetails", fields: [districtIdCommunication], references: [id])
  createdBy             Person?                            @relation("divyangCreatedBy", fields: [createdById], references: [id])
  updatedBy             Person?                            @relation("divyangUpdatedBy", fields: [updatedById], references: [id])

  auditLog DivyangDetailsAuditLog[]
}

model DivyangDetailsAuditLog {
  id               String             @id @default(uuid())
  divyangDetailsId String
  status           AuditLogStatusEnum
  date             DateTime
  description      String?

  divyangDetails DivyangDetails @relation(fields: [divyangDetailsId], references: [id])
}

model DivyangServiceMapping {
  id                              String                 @id @default(uuid())
  divyangId                       String
  sevaKendraId                    String?
  userId                          String?
  serviceId                       String
  dateOfService                   DateTime
  followUpDate                    DateTime
  dueDate                         DateTime
  //isFollowUpRequired             Boolean?
  isNonSevaKendraFollowUpRequired Boolean
  isCompleted                     StatusEnum
  howTheyGotService               HowTheyGotServiceEnum?
  reasonForNonCompletion          String?
  completedDate                   DateTime?
  donorId                         String?                @unique
  createdAt                       DateTime               @default(now())
  updatedAt                       DateTime               @updatedAt
  createdById                     String
  updatedById                     String

  divyang               DivyangDetails          @relation(fields: [divyangId], references: [id])
  createdBy             Person                  @relation("serviceMappingCreatedBy", fields: [createdById], references: [id])
  updatedBy             Person                  @relation("serviceMappingUpdatedBy", fields: [updatedById], references: [id])
  service               Service                 @relation(fields: [serviceId], references: [id])
  user                  User?                   @relation("inchargeUser", fields: [userId], references: [id])
  donor                 Donor?                  @relation(fields: [donorId], references: [id])
  sevaKendra            SevaKendra?             @relation(fields: [sevaKendraId], references: [id])
  nonSevaKendraFollowUp NonSevaKendraFollowUp[]
}

model Donor {
  id                    String                 @id @default(uuid())
  name                  String
  contact               String
  address               String
  divyangServiceMapping DivyangServiceMapping?
}

// model SevaKendraFollowUp {
//   id                      String                @id @default(uuid())
//   date                    DateTime
//   userId                  String
//   divyangServiceMappingId String
//   divyangServiceMapping   DivyangServiceMapping @relation(fields: [divyangServiceMappingId], references: [id])

//   user                    User                  @relation(fields: [userId], references: [id])
// }

model NonSevaKendraFollowUp {
  id                      String                @id @default(uuid())
  name                    String
  mobileNumber            String
  email                   String
  sendMail                Boolean
  divyangServiceMappingId String
  divyangServiceMapping   DivyangServiceMapping @relation(fields: [divyangServiceMappingId], references: [id])
}

model DisabilityOfDivyang {
  id                        String                         @id @default(uuid())
  divyangId                 String
  disabilityTypeId          String
  disabilitySubTypeId       String?
  isDisabilitySinceBirth    Boolean?
  disabilitySince           DateTime?
  disabilityArea            String?
  disabilityPercentage      Int?
  disabilityDueTo           String?
  certificateIssueAuthority CertificateIssueAuthorityEnum?
  disabilityCardUrl         String? // url

  divyang           DivyangDetails     @relation(fields: [divyangId], references: [id])
  disabilitySubType DisabilitySubType? @relation(fields: [disabilitySubTypeId], references: [id])
  disabilityType    DisabilityType     @relation(fields: [disabilityTypeId], references: [id])
}

model DisabilitySubType {
  id               String @id @default(uuid())
  name             String
  disabilityTypeId String

  divyang    DisabilityOfDivyang[]
  disability DisabilityType        @relation(fields: [disabilityTypeId], references: [id], onDelete: Cascade)

  @@unique([disabilityTypeId, name])
}

model DisabilityType {
  id                  String                @id @default(uuid())
  name                String                @unique
  disability          DisabilitySubType[]
  disabilityOfDivyang DisabilityOfDivyang[]
}

model MPConstituency {
  id             String           @id @default(uuid())
  name           String
  districtId     String
  district       District         @relation(fields: [districtId], references: [id])
  DivyangDetails DivyangDetails[]

  @@unique([name, districtId])
}

model MLAConstituency {
  id             String           @id @default(uuid())
  name           String
  districtId     String
  district       District         @relation(fields: [districtId], references: [id])
  DivyangDetails DivyangDetails[]

  @@unique([name, districtId])
}

model PanchayatUnion {
  id             String           @id @default(uuid())
  name           String
  districtId     String
  district       District         @relation(fields: [districtId], references: [id])
  divyangDetails DivyangDetails[]

  @@unique([name, districtId])
}

model TownPanchayat {
  id             String           @id @default(uuid())
  name           String
  districtId     String
  district       District         @relation(fields: [districtId], references: [id])
  DivyangDetails DivyangDetails[]

  @@unique([name, districtId])
}

model Municipality {
  id             String           @id @default(uuid())
  name           String
  districtId     String
  district       District         @relation(fields: [districtId], references: [id])
  DivyangDetails DivyangDetails[]

  @@unique([name, districtId])
}

model Corporation {
  id             String           @id @default(uuid())
  name           String
  districtId     String
  district       District         @relation(fields: [districtId], references: [id])
  DivyangDetails DivyangDetails[]

  @@unique([name, districtId])
}

model Taluk {
  id             String           @id @default(uuid())
  name           String
  districtId     String
  district       District         @relation(fields: [districtId], references: [id])
  DivyangDetails DivyangDetails[]

  @@unique([name, districtId])
}

model CommunityCategory {
  id      String           @id @default(uuid())
  name    String           @unique
  divyang DivyangDetails[]
}

// mapping table DivyangDetails - EducationalQualification mapping table
model DivyangEducationalQualification {
  id                         String @id @default(uuid())
  DivyangDetailsId           String
  educationalQualificationId String

  education EducationQualification @relation(fields: [educationalQualificationId], references: [id])
  divyang   DivyangDetails         @relation(fields: [DivyangDetailsId], references: [id])
}

// e.g. 1 - b.tech (IT)
model EducationQualification {
  id                           String @id @default(uuid())
  name                         String
  educationQualificationTypeId String

  educationQualificationType EducationQualificationType        @relation(fields: [educationQualificationTypeId], references: [id], onDelete: Cascade)
  divyang                    DivyangEducationalQualification[]

  @@unique([educationQualificationTypeId, name])
}

model EducationQualificationType {
  id                     String                   @id @default(uuid())
  name                   String                   @unique
  educationQualification EducationQualification[]
}

model generalMasters {
  id   String @id @default(uuid())
  name String
}

enum GenderEnum {
  MALE
  FEMALE
  TRANSGENDER
  OTHERS
}

enum BloodGroupEnum {
  O_POSITIVE
  O_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  A_POSITIVE
  A_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  HH
  others
}

enum StatusEnum {
  PENDING
  COMPLETED
  STOPPED
}

enum CertificateIssueAuthorityEnum {
  MEDICAL_BOARD
  GOVERNMENT_DOCTOR
  PRIVATE_DOCTOR
}

enum AuditLogStatusEnum {
  ACTIVE
  DEACTIVE
}

enum HowTheyGotServiceEnum {
  WHATSAPP
  VOLUNTEER
  SEVAKENDRA
}

enum FeaturesEnum {
  DASHBOARD
  SEVAKENDRA_SETUP
  SEVAKENDRA_USERS
  TYPE_MASTERS
  DIVYANG_DETAILS
  SERVICE_MASTER
  SERVICE_MAPPING
}


