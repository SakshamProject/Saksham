// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SevaKendra {
  id              String   @id @default(uuid())
  name            String   @unique
  districtId      String
  address         String
  mobileNumber    String
  landLineNumber  String
  startDate       DateTime? 
  contactPersonId String
  createdAt       DateTime @default(now())
  createdBy       String
  updatedAt       DateTime @updatedAt
  updatedBy       String 
  currentStatus   AuditLogStatusEnum?

  services           ServicesOnSevaKendras[]
  district           District                @relation(fields: [districtId], references: [id])
  contactPerson      ContactPerson           @relation(fields: [contactPersonId], references: [id])
  designations       Designation[]
  auditLog SevaKendraAuditLog[]
}

model SevaKendraAuditLog {
  id           String @id @default(uuid())
  sevaKendraId String
  status       AuditLogStatusEnum
  date         DateTime 
  description  String?

  sevakendra SevaKendra @relation(fields: [sevaKendraId], references: [id])
}

model ContactPerson {
  id           String @id @default(uuid())
  name         String
  email        String?
  phoneNumber1 String
  phoneNumber2 String?

  sevaKendra SevaKendra[]
}

model ServicesOnSevaKendras {
  id           String @id @default(uuid())
  sevakendraId String
  serviceId    String
  @@unique([sevakendraId,serviceId])

  sevakendra SevaKendra @relation(fields: [sevakendraId], references: [id])
  service    Service    @relation(fields: [serviceId], references: [id])
}

model ServiceType {
  id       String           @id @default(uuid())
  name     String           @unique
  service  Service[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id        String   @id @default(uuid())
  name      String   
  updatedAt DateTime @updatedAt
  serviceTypeId String
  createdAt DateTime @default(now())
  @@unique([serviceTypeId,name])

  serviceType     ServiceType          @relation(fields: [serviceTypeId], references: [id],onDelete: Cascade)
  sevaKendras ServicesOnSevaKendras[]
  divyang     DivyangServiceMapping[]
}

model District {
  id                String                   @id @default(uuid())
  name              String                   @unique
  stateId           String
  sevakendra        SevaKendra[]
  state             State                    @relation(fields: [stateId], references: [id])
  disability        DivyangDetails[]
  MPConstituencies  MPConstituency[]
  MLAConstituencies MLAConstituency[]
  TownPanchayats    TownPanchayat[]
  Municipalities    Municipality[]
  Corporations      Corporation[]
  PanchayatUnions    PanchayatUnion[]
  sevaKendraFollowUp SevaKendraFollowUp[]
  Taluks Taluk[]
}

model State {
  id        String     @id @default(uuid())
  name      String     @unique
  districts District[]
}

model User {
  id               String                   @id @default(uuid())
  userId           String                   @unique // check datatype
  firstName        String
  lastName         String
  gender           GenderEnum?
  dateOfBirth      DateTime?
  contactNumber    String
  whatsappNumber   String?
  designationId    String
  picture          String ?// url
  mail             String
  loginid          String                   @unique
  passwordId       String                   @unique
  currentStatus     AuditLogStatusEnum?

  createdAt DateTime ?@default(now())
  updatedAt DateTime ?@updatedAt

  createdById String?
  createdBy User ?@relation("createdBy", fields: [createdById], references: [id])
  usersCreated User[] @relation("createdBy")

  updatedById String? @unique
  updatedBy User ?@relation("updatedBy", fields: [updatedById], references: [id])
  usersUpdated User[] @relation("updatedBy")

  password         UserPassword             @relation(fields: [passwordId], references: [id])
  designation      Designation              @relation("Designation-Users", fields: [designationId], references: [id])
  designationsCreated          Designation[] @relation("createdBy")
  designationsUpdated          Designation[] @relation("updatedBy")
  sevaKendraFollowUp SevaKendraFollowUp[]
  userAuditLog UserAuditLog[]
}

model UserAuditLog {
  id           String @id @default(uuid())
  userId String
  status       AuditLogStatusEnum
  date         DateTime
  description  String?

  user User @relation(fields: [userId], references: [id])
}

model UserPassword {
  id             String @id @default(uuid())
  hashedPassword String
  user           User?
}

// side bars seva kendra master, service master
model Feature {
  id           String                   @id @default(uuid())
  name         String                   @unique
  designations FeaturesOnDesignations[]
}

// e.g. coordinator , volunteers
// or Designation
model Designation {
  id   String @id @default(uuid())
  name String 
  sevaKendraId String
  currentStatus AuditLogStatusEnum?

  createdAt DateTime? @default(now())
  createdById String?
  updatedAt DateTime? @updatedAt
  updatedById String?

  createdBy User? @relation("createdBy", fields:[createdById],references: [id])
  updatedBy  User? @relation("updatedBy", fields: [updatedById], references: [id])
  sevaKendra   SevaKendra @relation(fields: [sevaKendraId], references: [id])
  @@unique([sevaKendraId,name])

  users    User[] @relation("Designation-Users")
  features FeaturesOnDesignations[]
  designationAuditLog DesignationAuditLog[]
}

model DesignationAuditLog {
  id           String @id @default(uuid())
  designationId String
  status       AuditLogStatusEnum
  date         DateTime
  description  String?

  designation Designation @relation(fields: [designationId], references: [id])
}

// mapping sidebar/feature to certain designation e.g. users side bar to coordinator
model FeaturesOnDesignations {
  id            String   @id @default(uuid())
  featureId     String
  designationId String


  feature     Feature     @relation(fields: [featureId], references: [id])
  designation Designation @relation(fields: [designationId], references: [id])
}

model DivyangDetails {
  id                      String     @id @default(uuid())
  firstName               String
  lastName                String
  divyangId               String
  picture                 String? // url
  gender                  GenderEnum?
  bloodGroup              BloodGroupEnum
  dateOfBirth             DateTime
  age                     Int?
  mailId                  String
  mobileNumber            String
  fatherName              String
  motherName              String
  isMarried               Boolean?
  spouseName              String?
  spouseNumber            String?
  religion                String
  communityCategoryId     String
  community               String
  extraCurricularActivity String?
// all below here are in next page
  voterId                String?
  panCardNumber          String?
  drivingLicense         String?
  rationCardNumber       String?
  aadharCardNumber       String?
  pensionCardNumber      String?
  medicalInsuranceNumber String?
  disabilitySchemeNumber String?
  BPL_OR_APL_Number      String?

  doorNumber      String?
  flatNumber      String?
  streetName      String?
  nagarName       String?
  districtId      String?
  isRural Boolean?
  villageName     String?
  panchayatUnionId  String?
  talukId          String?
  townPanchayatId   String?
  municipalityId    String?
  corporationId     String?
  MLAConstituencyId String?
  MPConstituancyId  String?
  pincode         Int?

  isDisabilitySinceBirth    Boolean?
  disabilitySince           DateTime?
  disabilityArea            String?
  disabilityPercentage      Int?
  disabilityDueTo           String?
  certificateIssueAuthority CertificateIssueAuthorityEnum?
  disabilityCardUrl         String? // url
  disabilityDistrictId      String?
  identityCardNumber        String?
  udidCardNumber            String?
  udidEnrollmentNumber      String?
  udidCardUrl               String? // url

  isEmployed       Boolean?
  unemployedSince  DateTime?
  occupation       String?
  income           Int?
  fatherOccupation String?
  fatherIncome     Int?
  motherOccupation String?
  motherIncome     Int?
  spouseOccupation String?
  spouseIncome     Int?




  communityCategory CommunityCategory @relation(fields: [communityCategoryId], references: [id])
  corporation Corporation? @relation(fields: [corporationId],references: [id])
  mlaconstituency MLAConstituency? @relation(fields: [MLAConstituencyId],references: [id])
  mpconstituency MPConstituency? @relation(fields: [MPConstituancyId],references: [id])
  municipality Municipality? @relation(fields: [municipalityId],references: [id])
  townPanchayat TownPanchayat? @relation(fields: [townPanchayatId],references: [id])
  taluk Taluk? @relation(fields: [talukId],references: [id])
  panchayatUnion PanchayatUnion? @relation(fields: [panchayatUnionId],references: [id])
  district District? @relation(fields: [districtId], references: [id])
  disabilities          DisabilityOfDivyang[]
  eductionQualification DivyangEducationalQualification[]
  services              DivyangServiceMapping[]
 // divyangDetailsAuditLog DivyangDetailsAuditLog[]
}


// model DivyangDetailsAuditLog {
//   id           String @id @default(uuid())
//   divyangDetailsId String
//   status       AuditLogStatusEnum
//   date         DateTime
//   description  String?

//   divyangDetails DivyangDetails @relation(fields: [divyangDetailsId], references: [id])
// }

model DivyangServiceMapping {
  id                 String                 @id @default(uuid())
  divyangId          String
  divyang            DivyangDetails @relation(fields: [divyangId], references: [id])
  userId             String
  serviceId          String
  service            Service                @relation(fields: [serviceId], references: [id])
  dateOfService      DateTime
  dueDate            DateTime
  isFollowUpRequired Boolean?
  isCompleted        StatusEnum
  completedDate      DateTime?
  donorId            String?               @unique
  donor              Donor?                @relation(fields: [donorId],references: [id]) 
  nonSevaKendraFollowUp NonSevaKendraFollowUp[]
  sevaKendraFollowUp SevaKendraFollowUp[]
  divyangServiceMappingAuditLog DivyangServiceMappingAuditLog[]
}

model DivyangServiceMappingAuditLog {
  id           String @id @default(uuid())
  DivyangServiceMappingId String
  status       AuditLogStatusEnum
  date         DateTime
  description  String

  divyangServiceMapping DivyangServiceMapping @relation(fields: [DivyangServiceMappingId], references: [id])
}


model Donor {
  id             String @id @default(uuid())
  name           String
  contact        String
  address        String
  divyangServiceMapping DivyangServiceMapping?
}
model SevaKendraFollowUp{
  id                String        @id @default(uuid())
  date              DateTime
  districtId        String
  userId            String
  divyangServiceMappingId String
  divyangServiceMapping DivyangServiceMapping @relation(fields: [divyangServiceMappingId], references: [id])
  district          District     @relation(fields: [districtId],references: [id])
  user              User         @relation(fields: [userId],references: [id])
}

model NonSevaKendraFollowUp {
  id                      String  @id @default(uuid())
  name                    String
  mobileNumber            String
  email                   String // validation?
  sendMail                Boolean
  divyangServiceMappingId String

  divyangServiceMapping DivyangServiceMapping @relation(fields: [divyangServiceMappingId], references: [id])
}

model DisabilityOfDivyang {
  id                         String @id @default(uuid())
  divyangId                  String
  disabilitySubTypeId        String 
  divyangDisabilityDetailsId String

  DivyangDetails DivyangDetails @relation(fields: [divyangId], references: [id])
  disabilityType         DisabilitySubType      @relation(fields: [disabilitySubTypeId], references: [id])
}

model DisabilitySubType {
  id               String @id @default(uuid())
  name             String 
  disabilityTypeId String
  @@unique([disabilityTypeId,name])

  divyang    DisabilityOfDivyang[]
  disability DisabilityType        @relation(fields: [disabilityTypeId], references: [id],onDelete: Cascade)
}

model DisabilityType {
  id         String              @id @default(uuid())
  name       String              @unique
  disability DisabilitySubType[]
}

model MPConstituency {
  id         String   @id @default(uuid())
  name       String   
  districtId String
  @@unique([name,districtId])
  district   District @relation(fields: [districtId], references: [id])
  DivyangDetails DivyangDetails[]
}

model MLAConstituency {
  id         String   @id @default(uuid())
  name       String   
  districtId String
  @@unique([name,districtId])
  district   District @relation(fields: [districtId], references: [id])
  DivyangDetails DivyangDetails[]
}

model PanchayatUnion {
  id         String   @id @default(uuid())
  name       String   
  districtId String
  @@unique([name,districtId])
  district   District @relation(fields: [districtId], references: [id])
  divyangDetails DivyangDetails[]
}

model TownPanchayat {
  id         String   @id @default(uuid())
  name       String   
  districtId String
  @@unique([name,districtId])
  district   District @relation(fields: [districtId], references: [id])
  DivyangDetails DivyangDetails[]
}

model Municipality {
  id         String   @id @default(uuid())
  name       String   
  districtId String
  @@unique([name,districtId])
  district   District @relation(fields: [districtId], references: [id])
  DivyangDetails DivyangDetails[]
}

model Corporation {
  id         String   @id @default(uuid())
  name       String   
  districtId String
  @@unique([name,districtId])
  district   District @relation(fields: [districtId], references: [id])
  DivyangDetails DivyangDetails[]
}

model Taluk {
  id       String @id @default(uuid())
  name     String 
  districtId String
  @@unique([name,districtId])
  district   District @relation(fields: [districtId],references: [id])
  DivyangDetails DivyangDetails[]
}

model CommunityCategory {
  id      String                   @id @default(uuid())
  name    String                   @unique
  divyang DivyangDetails[]
}

// mapping table DivyangDetails - EducationalQualification mapping table
model DivyangEducationalQualification {
  id                         String @id @default(uuid())
  DivyangDetailsId   String
  educationalQualificationId String

  education EducationQualification @relation(fields: [educationalQualificationId], references: [id])
  divyang   DivyangDetails @relation(fields: [DivyangDetailsId], references: [id])
}

// e.g. 1 - b.tech (IT)
model EducationQualification {
  id      String                            @id @default(uuid())
  name    String                           
  educationQualificationTypeId String
@@unique([educationQualificationTypeId,name])

  educationQualificationType EducationQualificationType @relation(fields: [educationQualificationTypeId],references: [id], onDelete: Cascade)
  divyang DivyangEducationalQualification[]
}

model EducationQualificationType {
  id String                             @id @default(uuid())
  name String                           @unique
  educationQualification EducationQualification[]
}

model generalMasters{
  id      String @id @default(uuid())
  name    String
}

enum GenderEnum {
  MALE
  FEMALE
  TRANSGENDER
  OTHERS
}

enum BloodGroupEnum {
  O_POSITIVE
  O_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  A_POSITIVE
  A_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  HH
  others
}

enum StatusEnum {
  PENDING
  COMPLETED
}

enum CertificateIssueAuthorityEnum {
  MEDICAL_BOARD
  GOVERNMENT_DOCTOR
  PRIVATE_DOCTOR
}

enum AuditLogStatusEnum {
  ACTIVE
  DEACTIVE
}


